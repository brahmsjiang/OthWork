























名称字符串表的section的基地址
char* secstrings = (char*)hdr + entry[hdr->e_shstrndx].sh_offset

符号名称字符串表的section的基地址
char* strtab = (char*)hdr + entry[entry[i].sh_link].sh_offset

某一section的名称

--------

int ar[30000];	位于bss段,全局未初始化，不在可执行文件中，仅记录所需空间大小
int ar[300000] =  {1, 2, 3, 4, 5, 6 };	位于data段，全局已初始化，在可执行文件中
函数内自动变量位于栈上

BSS段的大小从可执行文件中得到，然后链接器得到这个大小的内存块，紧跟在数据段后面。当这个内存区进入程序的地址空间后全部清零，包含data和bss段的整个区段此时通常称为数据区。



“链接器为目标文件分配地址和空间”这句话中的“地址和空间”其实有两个含义
：
第一个是在输出的可执行文件中的空间；
第二个是在装载后的虚拟地址中的虚拟地址空间。比如“.text”和“ .data”来说，它们在文件中和虚拟地址中都要分配空 间，因为它们在这两者中都存在；而对于“.bss”这样的段来说，分配空间的意义只局限于 虚拟地址空间





struct load_info {
	Elf_Ehdr *hdr;
	Elf_Shdr *sechdrs;
	char *secstrings, *strtab;
	unsigned long symoffs, stroffs;
	struct {
		unsigned int sym, str, mod, vers, info, pcpu;
	} index;	//sym：符号表索引，str：字符串表索引, mod：模块索引
};

typedef struct elf32_sym{
  Elf32_Word	st_name;	//符号名
  Elf32_Addr	st_value;	//符号值，即是函数或变量的地址
  Elf32_Word	st_size;
  unsigned char	st_info;
  unsigned char	st_other;
  Elf32_Half	st_shndx;
} Elf32_Sym;

typedef struct elf32_rel {
	ELf32_Addr r_offset;	//需要重定位的位置，是从需要重定位的符号所在section的头部开始到将被重定位的位置之间的字节偏移
	Elf32_Word r_info;	//需要重定位的符号的符号表索引，以及相应的重定位类型
} Elf32_Rel;

----------

static int apply_relocations(struct module *mod, const struct load_info *info)
	
	for (i = 1; i < info->hdr->e_shnum; i++) {	//遍历sectionHeaderTable的所有entry
	
		unsigned int infosec = info->sechdrs[i].sh_info;
		if (info->sechdrs[i].sh_type == SHT_REL) {	//sh_type=SHT_REL section，调用apply_relocate函数来重定位
				apply_relocate(info->sechdrs, info->strtab, info->index.sym, i, mod);
			
				Elf32_Rel *rel = (void *)sechdrs[relsec].sh_addr;	//当前entry对应section的虚拟地址， relsec即是上面传入的ii
				for (i = 0; i < sechdrs[relsec].sh_size / sizeof(*rel); i++) {	//relocation section由几个Elf32_Rel构成
				
					/* This is where to make the change */
					location = (void *)sechdrs[sechdrs[i].sh_info].sh_addr + rel[i].r_offset;
					//当前relocation section entry的sh_info意为被重定位的section对应在sectionHeaderTable的索引值
					//location=被重定位的section的虚拟基地址+当前relocation section的偏移值
						
					/* This is the symbol it is referring to.  Note that all undefined symbols have been resolved.  */
					sym = (Elf32_Sym *)sechdrs[info->index.sym].sh_addr + ELF32_R_SYM(rel[i].r_info);
					//ELF32_Sym对应一个符号, sym就是指涉符号的虚拟地址; ELF32_R_SYM(x)即为((x) >> 8)
								
								
					*location += sym->st_value;	//st_value为符号在内核中的虚拟地址
				}

----------

struct kernel_param {
	const char *name;		//参数名
	const struct kernel_param_ops *ops;
	u16 perm;	//对sys文件系统中模块参数的访问许可
	s16 level;
	union {		//指向参数的指针
		void *arg;
		const struct kparam_string *str;
		const struct kparam_array *arr;
	};
};

struct kernel_param_ops {		//成员函数（set和get）用来在模块mod的args成员和模块的参数section间拷贝数据
	/* How the ops should behave */
	unsigned int flags;
	/* Returns 0, or -errno.  arg is in kp->arg. */
	int (*set)(const char *val, const struct kernel_param *kp);
	/* Returns length written or -errno.  Buffer is 4k (ie. be short!) */
	int (*get)(char *buffer, const struct kernel_param *kp);
	/* Optional function to free kp->arg when module unloaded. */
	void (*free)(void *arg);
};




